// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storage.proto

#include "storage.pb.h"
#include "storage.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* KVStable_method_names[] = {
  "/KVStable/write_sstables",
  "/KVStable/read_sstables",
  "/KVStable/write_blocks",
};

std::unique_ptr< KVStable::Stub> KVStable::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KVStable::Stub> stub(new KVStable::Stub(channel, options));
  return stub;
}

KVStable::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_write_sstables_(KVStable_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_read_sstables_(KVStable_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_write_blocks_(KVStable_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KVStable::Stub::write_sstables(::grpc::ClientContext* context, const ::EvictedBuffers& request, ::EvictionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::EvictedBuffers, ::EvictionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_write_sstables_, context, request, response);
}

void KVStable::Stub::async::write_sstables(::grpc::ClientContext* context, const ::EvictedBuffers* request, ::EvictionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::EvictedBuffers, ::EvictionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_write_sstables_, context, request, response, std::move(f));
}

void KVStable::Stub::async::write_sstables(::grpc::ClientContext* context, const ::EvictedBuffers* request, ::EvictionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_write_sstables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::EvictionResponse>* KVStable::Stub::PrepareAsyncwrite_sstablesRaw(::grpc::ClientContext* context, const ::EvictedBuffers& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::EvictionResponse, ::EvictedBuffers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_write_sstables_, context, request);
}

::grpc::ClientAsyncResponseReader< ::EvictionResponse>* KVStable::Stub::Asyncwrite_sstablesRaw(::grpc::ClientContext* context, const ::EvictedBuffers& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwrite_sstablesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KVStable::Stub::read_sstables(::grpc::ClientContext* context, const ::GetRequest& request, ::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetRequest, ::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_read_sstables_, context, request, response);
}

void KVStable::Stub::async::read_sstables(::grpc::ClientContext* context, const ::GetRequest* request, ::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetRequest, ::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_read_sstables_, context, request, response, std::move(f));
}

void KVStable::Stub::async::read_sstables(::grpc::ClientContext* context, const ::GetRequest* request, ::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_read_sstables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetResponse>* KVStable::Stub::PrepareAsyncread_sstablesRaw(::grpc::ClientContext* context, const ::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetResponse, ::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_read_sstables_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetResponse>* KVStable::Stub::Asyncread_sstablesRaw(::grpc::ClientContext* context, const ::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncread_sstablesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KVStable::Stub::write_blocks(::grpc::ClientContext* context, const ::SerialisedBlock& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SerialisedBlock, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_write_blocks_, context, request, response);
}

void KVStable::Stub::async::write_blocks(::grpc::ClientContext* context, const ::SerialisedBlock* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SerialisedBlock, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_write_blocks_, context, request, response, std::move(f));
}

void KVStable::Stub::async::write_blocks(::grpc::ClientContext* context, const ::SerialisedBlock* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_write_blocks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* KVStable::Stub::PrepareAsyncwrite_blocksRaw(::grpc::ClientContext* context, const ::SerialisedBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::SerialisedBlock, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_write_blocks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* KVStable::Stub::Asyncwrite_blocksRaw(::grpc::ClientContext* context, const ::SerialisedBlock& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwrite_blocksRaw(context, request, cq);
  result->StartCall();
  return result;
}

KVStable::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVStable_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVStable::Service, ::EvictedBuffers, ::EvictionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KVStable::Service* service,
             ::grpc::ServerContext* ctx,
             const ::EvictedBuffers* req,
             ::EvictionResponse* resp) {
               return service->write_sstables(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVStable_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVStable::Service, ::GetRequest, ::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KVStable::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetRequest* req,
             ::GetResponse* resp) {
               return service->read_sstables(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVStable_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVStable::Service, ::SerialisedBlock, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KVStable::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SerialisedBlock* req,
             ::google::protobuf::Empty* resp) {
               return service->write_blocks(ctx, req, resp);
             }, this)));
}

KVStable::Service::~Service() {
}

::grpc::Status KVStable::Service::write_sstables(::grpc::ServerContext* context, const ::EvictedBuffers* request, ::EvictionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVStable::Service::read_sstables(::grpc::ServerContext* context, const ::GetRequest* request, ::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVStable::Service::write_blocks(::grpc::ServerContext* context, const ::SerialisedBlock* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


